{
    "sourceFile": "app/components/actions/getCurrentUser.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1684742406291,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1684760013699,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,14 @@\n         email: session.user.email as string\r\n       }\r\n     });\r\n     if(!currentUser){return null}\r\n-    return currentUser;\r\n+    return {\r\n+      ...currentUser,\r\n+      createdAt: currentUser.createdAt.toISOString(),\r\n+      updatedAt: currentUser.updatedAt.toISOString(),\r\n+      emailVerified: currentUser.emailVerified?.toISOString()\r\n+    }\r\n   } catch(error: any){\r\n     return null;\r\n   }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1684762947836,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n import { getServerSession } from \"next-auth/next\";\r\n+import \r\n import { authOptions } from \"../../../pages/api/auth/[...nextauth]\"\r\n import prisma from \"../../libs/prismadb\"\r\n \r\n export async function getSession() {\r\n"
                },
                {
                    "date": 1684762980744,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import { getServerSession } from \"next-auth/next\";\r\n-import \r\n+import { getSession } from 'next-auth/client'\r\n import { authOptions } from \"../../../pages/api/auth/[...nextauth]\"\r\n import prisma from \"../../libs/prismadb\"\r\n \r\n export async function getSession() {\r\n"
                },
                {
                    "date": 1684763111063,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,5 @@\n import { getServerSession } from \"next-auth/next\";\r\n-import { getSession } from 'next-auth/client'\r\n import { authOptions } from \"../../../pages/api/auth/[...nextauth]\"\r\n import prisma from \"../../libs/prismadb\"\r\n \r\n export async function getSession() {\r\n"
                },
                {
                    "date": 1685163014108,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,31 +1,37 @@\n-import { getServerSession } from \"next-auth/next\";\r\n-import { authOptions } from \"../../../pages/api/auth/[...nextauth]\"\r\n-import prisma from \"../../libs/prismadb\"\r\n+import { getServerSession } from 'next-auth/next'\r\n \r\n+import { authOptions } from '@/pages/api/auth/[...nextauth]'\r\n+import prisma from '@/app/libs/prismadb'\r\n+\r\n export async function getSession() {\r\n-  return await getServerSession(authOptions);\r\n+  return await getServerSession(authOptions)\r\n }\r\n \r\n-export async function getCurrentUser() {\r\n-  try{\r\n-    const session = await getSession();\r\n-    if(!session?.user?.email){\r\n-      return null;\r\n+export default async function getCurrentUser() {\r\n+  try {\r\n+    const session = await getSession()\r\n+\r\n+    if (!session?.user?.email) {\r\n+      return null\r\n     }\r\n \r\n     const currentUser = await prisma.user.findUnique({\r\n-      where:{\r\n+      where: {\r\n         email: session.user.email as string\r\n       }\r\n\\ No newline at end of file\n-    });\r\n-    if(!currentUser){return null}\r\n+    })\r\n+\r\n+    if (!currentUser) {\r\n+      return null\r\n+    }\r\n+\r\n     return {\r\n       ...currentUser,\r\n       createdAt: currentUser.createdAt.toISOString(),\r\n       updatedAt: currentUser.updatedAt.toISOString(),\r\n-      emailVerified: currentUser.emailVerified?.toISOString()\r\n+      emailVerified: currentUser.emailVerified?.toISOString() || null\r\n     }\r\n-  } catch(error: any){\r\n-    return null;\r\n+  } catch (error: any) {\r\n+    return null\r\n   }\r\n-}\n+}\r\n"
                },
                {
                    "date": 1685163941595,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,5 +33,5 @@\n     }\r\n   } catch (error: any) {\r\n     return null\r\n   }\r\n-}\n\\ No newline at end of file\n+}\r\n"
                },
                {
                    "date": 1685163972818,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,8 @@\n \r\n export default async function getCurrentUser() {\r\n   try {\r\n     const session = await getSession()\r\n-\r\n     if (!session?.user?.email) {\r\n       return null\r\n     }\r\n \r\n@@ -23,8 +22,9 @@\n \r\n     if (!currentUser) {\r\n       return null\r\n     }\r\n+    console.log(currentUser)\r\n \r\n     return {\r\n       ...currentUser,\r\n       createdAt: currentUser.createdAt.toISOString(),\r\n"
                },
                {
                    "date": 1685164012002,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,8 @@\n \r\n     if (!currentUser) {\r\n       return null\r\n     }\r\n-    console.log(currentUser)\r\n \r\n     return {\r\n       ...currentUser,\r\n       createdAt: currentUser.createdAt.toISOString(),\r\n"
                }
            ],
            "date": 1684742406291,
            "name": "Commit-0",
            "content": "import { getServerSession } from \"next-auth/next\";\r\nimport { authOptions } from \"../../../pages/api/auth/[...nextauth]\"\r\nimport prisma from \"../../libs/prismadb\"\r\n\r\nexport async function getSession() {\r\n  return await getServerSession(authOptions);\r\n}\r\n\r\nexport async function getCurrentUser() {\r\n  try{\r\n    const session = await getSession();\r\n    if(!session?.user?.email){\r\n      return null;\r\n    }\r\n\r\n    const currentUser = await prisma.user.findUnique({\r\n      where:{\r\n        email: session.user.email as string\r\n      }\r\n    });\r\n    if(!currentUser){return null}\r\n    return currentUser;\r\n  } catch(error: any){\r\n    return null;\r\n  }\r\n}"
        }
    ]
}